[
    {
        "about": {
            "title": "Jobrium",
            "description": "Jobrium is a job candidate analytics application platform that enables job candidates to keep track of their applications. Users can track their application status, track jobs they want to apply for, and store information about the jobs they already have applied for, simply by pasting in the jobs URL. The development process took approximately 3 months (Frontend, Backend and Deployment)",
            "url": "www.jobrium.com",
            "slug": "jobrium",
            "tech": {
                "client": [
                    {
                        "name": "TypeScript",
                        "icon": "SiTypescript"
                    },
                    {
                        "name": "React",
                        "icon": "SiReact"
                    },
                    {
                        "name": "Next.JS",
                        "icon": "SiNextdotjs"
                    }
                ],
                "server": [
                    {
                        "name": "TypeScript",
                        "icon": "SiTypescript"
                    },
                    {
                        "name": "Apollo Server",
                        "icon": "SiApollographql"
                    },
                    {
                        "name": "Node.JS",
                        "icon": "SiNodedotjs"
                    },
                    {
                        "name": "PostreSQL",
                        "icon": "SiPostgresql"
                    },
                    {
                        "name": "GraphQL",
                        "icon": "SiGraphQL"
                    }
                ],
                "deployment": [
                    {
                        "name": "AWS",
                        "icon": "SiAmazonaws"
                    },
                    {
                        "name": "Vercel",
                        "icon": "SiVercel"
                    }
                ]
            }
        },
        "challenges": [
            "Puppeteer combined with the chrome webdriver binaries caused the project to become too large to deploy on AWS Lambda. To get around this issue I was required to create a separate lambda layer for the chrome driver binaries. This ended up being less than straightforward but I was able to make it work in the end.",
            "Configuring CORS on the API Gateway instance was more tedious than I was expecting. API Gateway when combined with the serverless framework had some less than obvious configuration requirements. It took several read throughs of the documentation for both tools to ensure that I finally was providing all proper headers and requirements in the correct locations."
        ],
        "learned": [
            "Significantly enhanced my knowledge of Typescript. I was able to start using more advanced types including Utility types and Generics.",
            "Originally the app could auto-fill job info when a user entered a URL for a position. It did this by running a scraping service from a sepereate Lambda function. Unfortunately, this violated the terms of use of all of the job boards I was planning on allowing the script to be run on and had to take it down. I should have done more research before imlementing this feature to ensure it was allowed/ethical.",
            "Using Higher Order Components to create protected client side routes"
        ],
        "different": [
            "Make sure features are both technically possible and feasible before implementing them.",
            "Write more and better tests."
        ]
    },
    {
        "about": {
            "title": "Friends of Japan",
            "url": "offline",
            "description": "Friends of Japan was a social media and content discovery platfrom focused on Japanese Anime. At the time, my friend and I ran an Anime focused Instagram page that had ~20K followers. We noticed our followers were having long discussions on our posts and were also messaging us for show recomendations. I built this site to provide our community with a platform better suited to their needs. The development process took approximately 4 months (Frontend, Backend and Deployment)",
            "slug": "friendsofjapan",
            "tech": {
                "client": [
                    {
                        "name": "TypeScript",
                        "icon": "SiTypescript"
                    },
                    {
                        "name": "React",
                        "icon": "SiReact"
                    },
                    {
                        "name": "Next.JS",
                        "icon": "SiNextdotjs"
                    }
                ],
                "server": [
                    {
                        "name": "Python",
                        "icon": "SiPython"
                    },
                    {
                        "name": "Django",
                        "icon": "SiDjango"
                    }
                ],
                "deployment": [
                    {
                        "name": "AWS",
                        "icon": "SiAmazonaws"
                    },
                    {
                        "name": "Vercel",
                        "icon": "SiVercel"
                    }
                ]
            }
        },
        "challenges": [
            "The app has a feature where users can like or dislike content. Each user, however, can only have one review per piece of content, outstanding, at a time. I  learned about and constructed composite key tables in my database for 'liked/disliked' objects to handle the issue."
        ],
        "learned": [
            "API security, CORS",
            "Composite Keys in SQL",
            "Different Authentication options. Project briefly utilized JWT’s but was transitioned to using session tokens after doing more research.",
            "Benefits of static site generation vs server-side rendering vs client-side rendering. I ended up using all these techniques in the project. With most of the site being statically generated or statically generated with additional client-side hydration."
        ],
        "different": [
            "Focus on the mandatory components of the app first, then build cool/ fun stuff. Removed features include: live chat rooms, personalized twitter feeds (built from the twitter API based off terms the user liked and content the user liked on Friends of Japan) and planning was also underway to have in app achievements and leaderboards for users’ stats. While these features, were fun to make, they were time consuming, put the project behind schedule and would have been better added in for a subsequent version of the app.",
            "Organize components better/more logically."
        ]
    }
]